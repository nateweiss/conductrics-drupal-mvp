<?php
/**
* @file
* Bean plugin for showing tweets for a specified twitter user
*/

/**
* Implements hook_bean_types_api_info().
*/
function conductrics_1_bean_types_api_info() {
	return array('api' => 4);
}

/**
* Implements hook_init().
*/
function conductrics_1_init() {
	$path = drupal_get_path('module', 'conductrics_1') . '/assets';
	drupal_add_css($path.'/conductrics-experience.css', array('scope' => 'header') ); // include css before js (point is to avoid 'flicker')
	drupal_add_js($path .'/conductrics.jquery.js', array('scope' => 'header') ); // relies on jquery
	drupal_add_js($path .'/conductrics-experience.js', array('scope' => 'footer')); // relies on conductrics.jquery
	$conductrics_jquery_options = array(
		'conductrics-jquery' => array(
			'owner' => variable_get('conductrics_owner_code', ''),
			'apiKey' => variable_get('conductrics_api_key', ''),
			'baseUrl' => variable_get('conductrics_api_url', ''),
		)
	);
	drupal_add_js($conductrics_jquery_options, 'setting');
}

/**
* Implements hook_bean_types().
*/
function conductrics_1_bean_types() {
	$plugins = array();
	$plugins['conductrics_block'] = array(
		'label' => t('Conductrics Selection'), //note this appears as the Heading when creating a new block of this type
		'description' => t('Container for a Conductrics test or targeting/optimization.'),
		'handler' => array(
			'class' => 'ConductricsBlockBean',
			'parent' => 'bean',
			'path' => drupal_get_path('module', 'conductrics_1') . '/plugins/bean',
			'file' => 'conductrics_1.conductrics_block.inc',
		),
	);
	return $plugins;
}

/**
* Implements hook_menu().
*/
function conductrics_1_menu() {
  $items = array();

  $items['admin/config/content/conductrics_1'] = array(
    'title' => 'Conductrics',
    'description' => 'Provide your Conductrics account details here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('conductrics_1_admin'),
    'access arguments' => array('administer conductrics_1 settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  $items['autocomplete/blocks'] = array(
  	'title' => t('Conductrics AJAX Callback - Blocks'),
  	'page callback' => 'conductrics_1_autocomplete_blocks',
    'access arguments' => array('administer conductrics_1 settings'),
  	'type' => MENU_CALLBACK,
  );

  return $items;
}

function conductrics_1_autocomplete_blocks($filter) {
	$items = conductrics_1_blocks_matching($filter);
	return drupal_json_output($items);
}


/**
 * Implements hook_theme().
 */
function conductrics_1_theme() {
  $items = array();
  $items['agent_experience'] = array(
    'arguments' => array(
      'entities' => NULL,
      'view_mode'  => NULL,
      'agent_code' => NULL,
      'choice_code' => NULL,
    ),
    'file' => 'conductrics_1.theme.inc',
  );
  $items['agent_experience_block'] = array(
    'arguments' => array(
      'block' => NULL,
    ),
    'file' => 'conductrics_1.theme.inc',
  );
  return $items;
}

function conductrics_1_admin() {
	$form = array();

	// TODO - store the values in one array, rather than seperate variables

	$form['conductrics_owner_code'] = array(
		'#type' => 'textfield',
		'#title' => t('Owner Code'),
		'#default_value' => variable_get('conductrics_owner_code', ''),
		'#size' => 30,
		'#maxlength' => 50,
		'#description' => t("Paste in from the Account > Keys page in Conductrics Console (starts with 'owner')"),
		'#required' => TRUE,
	);

	$form['conductrics_api_key'] = array(
		'#type' => 'textfield',
		'#title' => t('Runtime API Key'),
		'#default_value' => variable_get('conductrics_api_key', ''),
		'#size' => 30,
		'#maxlength' => 50,
		'#description' => t("Paste in from the Account > Keys page in Conductrics Console (starts with 'api')"),
		'#required' => TRUE,
	);

	$form['conductrics_admin_key'] = array(
		'#type' => 'textfield',
		'#title' => t('Admin API Key'),
		'#default_value' => variable_get('conductrics_admin_key', ''),
		'#size' => 30,
		'#maxlength' => 50,
		'#description' => t("Paste in from the Account > Keys page in Conductrics Console (starts with 'admin')"),
		'#required' => TRUE,
	);

	$form['conductrics_api_url'] = array(
		'#type' => 'textfield',
		'#title' => t('API Server URL'),
		'#default_value' => variable_get('conductrics_api_url', 'https://api.conductrics.com'),
		'#size' => 30,
		'#maxlength' => 50,
		'#description' => t("Adjust this URL only if using a custom server from Conductrics."),
		'#required' => FALSE,
	);

	$form['conductrics_console_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Console URL'),
		'#default_value' => variable_get('conductrics_console_url', 'https://console.conductrics.com'),
		'#size' => 30,
		'#maxlength' => 50,
		'#description' => t("Adjust this URL only if using a custom server from Conductrics."),
		'#required' => FALSE,
	);

	return system_settings_form($form);
}

/**
* Implements hook_elements().
*/
function conductrics_1_element_info() {
  return array(
    'node_selection' => array(
      '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('conductrics_1_element_process_callback'),
    ),
  );
}


/**
* Generates form elements for my element.
*/
function conductrics_1_element_process_callback($element, &$form_state) {
	return $element;
}

function conductrics_1_element_callback($form, $form_state) {
  	return $form['settings']['nodes']['items'];
}

function conductrics_1_blocks_matching($criteria) {
	$all_blocks = conductrics_1_block_list();
	$results = array();
	foreach ($all_blocks as $region) {
		foreach ($region as $block) {
			// TODO - better to do this criteria-matching in the query
			if ($criteria == '' or stristr($block->module, $criteria) or stristr($block->delta, $criteria) or stristr($block->theme, $criteria)) {
				$identifier = "$block->module:$block->delta";
				$results[$identifier] = "Block '$block->delta' from module '$block->module' (theme '$block->theme')";
			}
		}
	}
	return $results;
 }

/**
* Gets a list of all eligible blocks from the database.
*/
// adapted from _block_load_blocks (see https://api.drupal.org/api/drupal/modules%21block%21block.module/function/_block_load_blocks/7)
function conductrics_1_block_list() {
	$query = db_select('block', 'b');
	$result = $query->fields('b')->condition('b.status', 1)->orderBy('b.region')->orderBy('b.weight')->orderBy('b.module')->addTag('block_load')->addTag('translatable')->execute();

	$block_info = $result->fetchAllAssoc('bid');
	// Allow modules to modify the block list.
	drupal_alter('block_list', $block_info); // TODO - ask Acquia folks whether it makes sense to honor this hook for this purpose?

	$blocks = array();
	foreach ($block_info as $block) {
		$blocks[$block->region]["{$block->module}_{$block->delta}"] = $block;
	}
	return $blocks;
 }

