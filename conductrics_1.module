<?php
/**
* @file
* Bean plugin for showing tweets for a specified twitter user
*/

/**
* Implements hook_bean_types_api_info().
*/
function conductrics_1_bean_types_api_info() {
	return array('api' => 4);
}

/**
* Implements hook_init().
*/
function conductrics_1_init() {
	$path = drupal_get_path('module', 'conductrics_1') . '/assets';
	drupal_add_css($path.'/conductrics-experience.css', array('scope' => 'header') ); // include css before js (point is to avoid 'flicker')
	drupal_add_js($path .'/conductrics.jquery.js', array('scope' => 'header') ); // relies on jquery
	drupal_add_js($path .'/conductrics-experience.js', array('scope' => 'footer')); // relies on conductrics.jquery
	$conductrics_jquery_options = array(
		'conductrics-jquery' => array(
			'owner' => variable_get('conductrics_owner_code', ''),
			'apiKey' => variable_get('conductrics_api_key', ''),
			'baseUrl' => variable_get('conductrics_api_url', ''),
		)
	);
	drupal_add_js($conductrics_jquery_options, 'setting');
}

/**
* Implements hook_bean_types().
*/
function conductrics_1_bean_types() {
	$plugins = array();
	$plugins['conductrics_block'] = array(
		'label' => t('Conductrics Selection'), //note this appears as the Heading when creating a new block of this type
		'description' => t('Container for a Conductrics test or targeting/optimization.'),
		'handler' => array(
			'class' => 'ConductricsBlockBean',
			'parent' => 'bean',
			'path' => drupal_get_path('module', 'conductrics_1') . '/plugins/bean',
			'file' => 'conductrics_1.conductrics_block.inc',
		),
	);
	return $plugins;
}

function conductrics_1_bean_submit(&$bean, &$form, &$form_state) {
	$values = $form_state['values'];

	$experiences = array();
	if ($values['selection_mode'] == 'block-vis') {
		$str = $values['block_vis']['block'];
		$experiences['block-visible'] = array(
			'blocks' => array( conductrics_1_str_to_block_data($str) ),
		);
		$experiences['block-hidden'] = array(
			'blocks' => array(),
		);
	} else if ($values['selection_mode'] == 'block-swap') {
		for ($num = 1; $num <= 4; $num++) {
			$str = $values['block_swap']["block_$num"];
			if (!empty($str)) {
				$experiences["block-$num"] = array(
					'blocks' => array( conductrics_1_str_to_block_data($str) ),
				);
			}
		};
	};

	$form_state['values']['settings'] = array(
		'agent_code' => $values['agent_code'],
		'selection_mode' => $values['selection_mode'],
	);
	$form_state['values']['experiences'] = $experiences;
	conductrics_1_goals_associate( $form_state['values']['agent_code'], $form_state['values']['goals'] );
	unset($form_state['values']['agent_code']);
	unset($form_state['values']['selection_mode']);
}

function conductrics_1_str_to_block_data($str) {
	$parts = explode(':', $str);
	$block_data = array(
		'module' => $parts[0],
		'delta' => $parts[1],
	);
	return $block_data;
}

function conductrics_1_block_data_to_str($block_data) {
	if (isset($block_data['module']) && isset($block_data['delta'])) {
		return $block_data['module'] . ':' . $block_data['delta'];
	}
	return FALSE;
}
function conductrics_1_block_str_valid($str) {
	return preg_match('/^[0-9A-Za-z_-]+\:[0-9A-Za-z_-]+$/', $str);
}
function conductrics_1_code_valid($str) {
	return preg_match('/^[0-9A-Za-z_-]+$/', $str);
}

/**
* Implements hook_menu().
*/
function conductrics_1_menu() {
  $items = array();

  $items['admin/config/content/conductrics_1'] = array(
    'title' => 'Conductrics',
    'description' => 'Provide your Conductrics account details here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('conductrics_1_admin'),
    'access arguments' => array('administer conductrics_1 settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  $items['autocomplete/blocks'] = array(
  	'title' => t('Conductrics AJAX Callback - Blocks'),
  	'page callback' => 'conductrics_1_autocomplete_blocks',
    'access arguments' => array('administer conductrics_1 settings'),
  	'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_theme().
 */
function conductrics_1_theme() {
  $items = array();
  $items['agent_experience'] = array(
    'arguments' => array(
      'entities' => NULL,
      'view_mode'  => NULL,
      'agent_code' => NULL,
      'choice_code' => NULL,
    ),
    'file' => 'conductrics_1.theme.inc',
  );
  $items['agent_experience_block'] = array(
    'arguments' => array(
      'block' => NULL,
    ),
    'file' => 'conductrics_1.theme.inc',
  );
  return $items;
}

function conductrics_1_admin($form, &$form_state) {

	$form['account'] = array(
		'#type' => 'fieldset',
		'#title' => 'Account Settings',
	);

	// TODO - store the values in one array, rather than separate variables
	$form['account']['conductrics_owner_code'] = array(
		'#type' => 'textfield',
		'#title' => t('Owner Code'),
		'#default_value' => variable_get('conductrics_owner_code', ''),
		'#size' => 35,
		'#maxlength' => 50,
		'#description' => t("Paste in from the Account > Keys page in Conductrics Console (starts with 'owner')"),
		'#required' => TRUE,
	);

	$form['account']['conductrics_api_key'] = array(
		'#type' => 'textfield',
		'#title' => t('Runtime API Key'),
		'#default_value' => variable_get('conductrics_api_key', ''),
		'#size' => 35,
		'#maxlength' => 50,
		'#description' => t("Paste in from the Account > Keys page in Conductrics Console (starts with 'api')"),
		'#required' => TRUE,
	);

	$form['account']['conductrics_admin_key'] = array(
		'#type' => 'textfield',
		'#title' => t('Admin API Key'),
		'#default_value' => variable_get('conductrics_admin_key', ''),
		'#size' => 35,
		'#maxlength' => 50,
		'#description' => t("Paste in from the Account > Keys page in Conductrics Console (starts with 'admin')"),
		'#required' => TRUE,
	);

	$form['account']['conductrics_api_url'] = array(
		'#type' => 'textfield',
		'#title' => t('API Server URL'),
		'#default_value' => variable_get('conductrics_api_url', 'https://api.conductrics.com'),
		'#size' => 35,
		'#maxlength' => 50,
		'#description' => t("Adjust this URL only if using a custom server from Conductrics."),
		'#required' => FALSE,
	);

	$form['account']['conductrics_console_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Console URL'),
		'#default_value' => variable_get('conductrics_console_url', 'https://console.conductrics.com'),
		'#size' => 35,
		'#maxlength' => 50,
		'#description' => t("Adjust this URL only if using a custom server from Conductrics."),
		'#required' => FALSE,
	);

	$goals = conductrics_1_goals_get();
	$form['goals'] = array(
		'#type' => 'fieldset',
		'#title' => 'Goals',
		'#prefix' => '<div id="conductrics_ajax_goals_wrapper">',
		'#suffix' => '</div>',
		'#tree' => TRUE,
	);

	if (empty($form_state['goal_codes'])) {
		$form_state['goal_codes'] = array_keys($goals);
	}

	foreach ($form_state['goal_codes'] as $goal_code) {
		if ( isset($form_state['values']["remove_$goal_code"]) ) {
			conductrics_1_goal_remove($goal_code);
			continue;
		}

		if (isset($goals[$goal_code])) {
			$goal = $goals[$goal_code];
		} else {
			$goal = array(
				'urls' => array('*'),
			);
		}

		$form['goals'][$goal_code] = array(
			'#type' => 'fieldset',
			'#attributes' => array('class' => array('container-inline')),
		);
		$form['goals'][$goal_code]['goal_code'] = array(
			'#type' => 'textfield',
			'#title' => t('Goal'),
			'#default_value' => $goal_code,
			'#size' => 8,
			'#maxlength' => 50,
			'#disabled' => isset($goals[$goal_code]),
			'#required' => TRUE,
		);
		$form['goals'][$goal_code]['value'] = array(
			'#type' => 'textfield',
			'#title' => t('valued at'),
			'#default_value' => $goal['urls'],
			'#size' => 2,
			'#required' => TRUE,
			'#default_value' => isset($goal['value']) ? $goal['value'] : 1,
		);
		$form['goals'][$goal_code]['goal_mode'] = array(
			'#type' => 'select',
			'#default_value' => $goal['goal_mode'],
			'#title' => 'occurs',
			'#options' => array(
				'page-load' => "on page load",
			),
			'#default_value' => 'page-load',
			'#required' => TRUE,
		);
		$form['goals'][$goal_code]['urls'] = array(
			'#type' => 'textfield',
			'#title' => t('if URL matches'),
			'#default_value' => $goal['urls'],
			'#size' => 20,
			'#maxlength' => 500,
			'#required' => TRUE,
		);
		$form['goals'][$goal_code]['remove'] = array(
			'#type' => 'button',
			'#value' => t('x'),
			'#name' => "remove_$goal_code",
		);
	}

	  $form['goals']['add_goal'] = array(
	    '#type' => 'submit',
	    '#value' => t('Add Another Goal'),
	    '#submit' => array('conductrics_1_ajax_add_goal'),
	    // See the examples in ajax_example.module for more details on the
	    // properties of #ajax.
	    '#attributes' => array('style' => 'margin-bottom:10px'),
	    '#ajax' => array(
	      'callback' => 'conductrics_1_ajax_add_goal_callback',
	      'wrapper' => 'conductrics_ajax_goals_wrapper',
	    ),
	  );

	  $form['submit'] = array(
	    '#type' => 'submit',
	    '#value' => 'Save Configuration',
	    '#prefix' => '</p>', // wrap with <p> to fix lack of spacing under button
	    '#suffix' => '</p>',
	  );

	return $form;
}

function conductrics_1_preprocess_html(&$variables) {
	$goals = conductrics_1_goals_get();
	$goal_strs = array();
	foreach ($goals as $goal_code => $goal_item) {
		foreach ($goal_item['agents'] as $agent_code) {
			array_push($goal_strs, $agent_code .':'. $goal_code .':'. $goal_item['value']);
		}
	}
	$variables['attributes_array']['data-conductrics-reward-onload'] = implode(",", $goal_strs);
}

function conductrics_1_admin_validate($form, &$form_state) {
	if (!conductrics_1_code_valid($form_state['values']['conductrics_owner_code'])) {
		form_set_error('conductrics_owner_code', "Invalid owner code");
	}
	foreach ($form_state['goal_codes'] as $goal_code) {
		if (isset($form_state['values']['goals'][$goal_code])) {
			$fieldset = $form_state['values']['goals'][$goal_code];
			if (!conductrics_1_code_valid($fieldset['goal_code'])) {
				form_set_error('', "Invalid goal code for '$goal_code'");
			}
			if (!is_numeric($fieldset['value'])) {
				form_set_error('', "Invalid value provided for '$goal_code' (must be numeric)");
			}
		}
	}
}
function conductrics_1_admin_submit($form, &$form_state) {
	variable_set('conductrics_owner_code', $form_state['values']['conductrics_owner_code']);
	variable_set('conductrics_api_key', $form_state['values']['conductrics_api_key']);
	variable_set('conductrics_admin_key', $form_state['values']['conductrics_admin_key']);
	variable_set('conductrics_api_url', $form_state['values']['conductrics_api_url']);
	variable_set('conductrics_console_url', $form_state['values']['conductrics_console_url']);

	foreach ($form_state['goal_codes'] as $goal_code) {
		if (isset($form_state['values']['goals'][$goal_code])) {
			$fieldset = $form_state['values']['goals'][$goal_code];
			$data = array(
				'goal_mode' => $fieldset['goal_mode'],
				'value' => $fieldset['value'],
			);
			if ($data['goal_mode'] == 'page-load') {
				$data['urls'] = $fieldset['urls'];
			}
			conductrics_1_goal_update($goal_code, $data);
		}
	}
}

function conductrics_1_ajax_add_goal($form, &$form_state) {
  $num = count($form_state['goal_codes']) + 1;
  $goal_code = "goal-$num";
  array_push($form_state['goal_codes'], $goal_code);
  $form_state['rebuild'] = TRUE;
}

function conductrics_1_ajax_add_goal_callback($form, $form_state) {
  return $form['goals'];
}

function conductrics_1_goals_get() {
	$goals = variable_get('conductrics_goals');
	if (!isset($goals)) {
		$goals = array(
			'any-page' => array(
				'agents' => array(),
				'urls' => array('*'),
			),
		);
	}
	return $goals;
}
function conductrics_1_goals_set($goals) {
	variable_set('conductrics_goals', $goals);
}

function conductrics_1_goal_update($goal_code, $data) {
	$goals = conductrics_1_goals_get();
	if ( !isset($goals[$goal_code]) ) {
		$goals[$goal_code] = array(
			'agents' => array(), // maintained via conductrics_1_goals_associate
		);
	}
	foreach ($data as $key => $value) {
		$goals[$goal_code][$key] = $data[$key];
	}
 	conductrics_1_goals_set($goals);
}
function conductrics_1_goal_remove($goal_code) {
	$goals = conductrics_1_goals_get();
	unset($goals[$goal_code]);
	conductrics_1_goals_set($goals);
}
function conductrics_1_goals_associate($agent_code, $goal_selections) {
	$goals = conductrics_1_goals_get();
	foreach ($goals as $goal_code => &$goal_item) {
		if ( isset($goal_selections[$goal_code]) && $goal_selections[$goal_code] ) { // user wants an association
			if ( !in_array($agent_code, $goal_item['agents']) ) { // and there is no association now
				array_push($goal_item['agents'], $agent_code);
			}
		} else { // user doesn't want an association
			if ( in_array($agent_code, $goal_item['agents']) ) { // and there is an association now
				$offset = array_search($agent_code, $goal_item['agents']);
				array_splice($goal_item['agents'], $offset, 1);
			}
		}
	}
	conductrics_1_goals_set($goals);
}

function conductrics_1_autocomplete_blocks($filter) {
	$items = conductrics_1_blocks_matching($filter);
	return drupal_json_output($items);
}

function conductrics_1_blocks_matching($criteria) {
	$all_blocks = conductrics_1_block_list();
	$results = array($criteria);
	foreach ($all_blocks as $region) {
		foreach ($region as $block) {
			// TODO - better to do this criteria-matching in the query
			if ($criteria == '' or stristr($block->module, $criteria) or stristr($block->delta, $criteria) or stristr($block->theme, $criteria)) {
				$identifier = "$block->module:$block->delta:$block->theme";
				$results[$identifier] = "Block '$block->delta' from module '$block->module' (theme '$block->theme')";
			}
		}
	}
	return $results;
 }

// Gets a list of all eligible blocks from the database.
// adapted from _block_load_blocks (see https://api.drupal.org/api/drupal/modules%21block%21block.module/function/_block_load_blocks/7)
function conductrics_1_block_list() {
	$query = db_select('block', 'b');
	$result = $query->fields('b')->condition('b.status', 1)->orderBy('b.region')->orderBy('b.weight')->orderBy('b.module')->addTag('block_load')->addTag('translatable')->execute();

	$block_info = $result->fetchAllAssoc('bid');
	// Allow modules to modify the block list.
	drupal_alter('block_list', $block_info); // TODO - ask Acquia folks whether it makes sense to honor this hook for this purpose?

	$blocks = array();
	foreach ($block_info as $block) {
		$blocks[$block->region]["{$block->module}_{$block->delta}"] = $block;
	}
	return $blocks;
 }

