<?php
/**
* @file
* Provides content testing, targeting, and dynamic optimizations.
*/

module_load_include('inc', 'conductrics_mvp', 'conductrics_mvp_admin'); // form and supporting logic for configuration page
module_load_include('inc', 'conductrics_mvp', 'conductrics_mvp_data_access'); // helper functions for getting/setting data about agents, goals, etc

/**
* Implements hook_bean_types_api_info().
*/
function conductrics_mvp_bean_types_api_info() {
  return array('api' => 4);
}

/**
* Implements hook_init().
*
* Include JS and CSS snippets to "autowire"
*/
function conductrics_mvp_init() {
  if (!path_is_admin(current_path())) { // TODO - should we not have the check for path_is_admin here, perhaps interferes with css/js preprocessing
    $path = drupal_get_path('module', 'conductrics_mvp') . '/assets';
    drupal_add_css($path.'/conductrics-experience.css', array('scope' => 'header') ); // include css before js (point is to avoid 'flicker')
    drupal_add_js($path .'/conductrics.jquery.js', array('scope' => 'header') ); // see https://github.com/conductrics/conductrics-jquery
    drupal_add_js($path .'/conductrics-experience.js', array('scope' => 'footer')); // relies on conductrics.jquery
    // Pass account info to JS so that jQuery plugin can talk to Conductrics
    $account_info = variable_get('conductrics_account_info');
    $conductrics_jquery_options = array(
      'conductrics-jquery' => array(
        'owner' => $account_info['owner_code'],
        'apiKey' => $account_info['api_key'],
        'baseUrl' => !empty($account_info['api_url']) ? $account_info['api_url'] : 'https://api.conductrics.com',
      )
    );
    drupal_add_js($conductrics_jquery_options, 'setting');
  }
}

/**
* Implements hook_bean_types().
*/
function conductrics_mvp_bean_types() {
  $plugins = array();
  $plugins['conductrics_block'] = array(
    'label' => t('Conductrics Selection'),
    'description' => t('Container for a Conductrics test or targeting/optimization.'),
    'handler' => array(
      'class' => 'ConductricsBlockBean',
      'parent' => 'bean',
      'path' => drupal_get_path('module', 'conductrics_mvp') . '/plugins/bean',
      'file' => 'conductrics_mvp.conductrics_block.inc',
    ),
  );
  return $plugins;
}


/**
* Implements hook_menu().
*/
function conductrics_mvp_menu() {
  $items = array();

  $items['admin/config/content/conductrics_mvp'] = array(
    'title' => 'Conductrics',
    'description' => 'Provide your Conductrics account details here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('conductrics_mvp_admin'),
    'access arguments' => array('administer conductrics_mvp settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  $items['autocomplete/blocks'] = array(
    'title' => t('Conductrics AJAX Callback - Blocks'),
    'page callback' => 'conductrics_mvp_autocomplete_blocks',
    'access arguments' => array('administer conductrics_mvp settings'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}
function conductrics_mvp_autocomplete_blocks($filter) {
  $items = conductrics_mvp_blocks_matching($filter);
  return drupal_json_output($items);
}

/**
 * Implements hook_theme().
 */
function conductrics_mvp_theme() {
  $items = array();
  $items['agent_experience'] = array(
    'arguments' => array(
      'entities' => NULL,
      'view_mode'  => NULL,
      'agent_code' => NULL,
      'choice_code' => NULL,
    ),
    'file' => 'conductrics_mvp.theme.inc',
  );
  $items['agent_experience_block'] = array(
    'arguments' => array(
      'block' => NULL,
    ),
    'file' => 'conductrics_mvp.theme.inc',
  );
  return $items;
}

/**
 * Implements hook_preprocess_html().
 */
function conductrics_mvp_preprocess_html(&$variables) {
  if (!path_is_admin(current_path())) {
    $goals = conductrics_mvp_goals_get();
    $goal_strs = array();
    foreach ($goals as $goal_code => $goal_item) {
      $goal_relevant_here = false;
      if ($goal_item['goal_mode'] == 'page-load') {
        foreach ($goal_item['urls'] as $url) {
          if ( fnmatch($url, request_path()) ) {
            $goal_relevant_here = true;
          }
        }
      }
      if ($goal_relevant_here) {
        foreach ($goal_item['agents'] as $agent_code) {
          array_push($goal_strs, $agent_code .':'. $goal_code .':'. $goal_item['value']);
        }
      }
    }
    $variables['attributes_array']['data-conductrics-reward-onload'] = implode(",", $goal_strs);

    // features
    $features = array(); // will be an array of feature codes to pass to conductrics
    $account_info = variable_get('conductrics_account_info');
    if (isset($account_info['tokens'])) {
      foreach ($account_info['tokens'] as $token_code => $token_item) { // for each token that has been configured as passable to Conductrics
        // assume $token_code is a string in normal Drupal-style token format, for example: '[current-user:field-sport]'
        $token_value = token_replace($token_code); // will now be the value of the token, or the value of $token_code if no replacement took place (unknown token)
        if (!empty($token_value) && $token_value != $token_code) { // the token as a value
          $prefix_with = empty($token_item['prefix']) ? '' : ($token_item['prefix'] . '-'); // The 'prefix' at this level is a cheap way to namespace the values that get returned by the tokens
          foreach ( explode(',', $token_value) as $part) { // we might have a comma-separated list of values, as in "Football, Baseball, Soccer"
            $feature_value = $prefix_with . trim($part);
            if (conductrics_mvp_code_valid($feature_value)) {
              array_push($features, $feature_value);
            }
          }
        }
      }
    }
    if (count($features) > 0) {
      $variables['attributes_array']['data-conductrics-features'] = implode(",", $features);
    }
  }
}

// TODO - this probably belongs in the bean file?
function conductrics_mvp_bean_submit(&$bean, &$form, &$form_state) {
  $values = $form_state['values'];

  if ($bean->type != 'conductrics_block') {
    return;
  }

  $experiences = array();
  if ($values['selection_mode'] == 'block-vis') {
    $str = $values['block_vis']['block'];
    $experiences['block-visible'] = array(
      'blocks' => array( conductrics_mvp_str_to_block_data($str) ),
    );
    $experiences['block-hidden'] = array(
      'blocks' => array(),
    );
  } else if ($values['selection_mode'] == 'block-swap') {
    for ($num = 1; $num <= 4; $num++) {
      $str = $values['block_swap']["block_$num"];
      if (!empty($str)) {
        $experiences["block-$num"] = array(
          'blocks' => array( conductrics_mvp_str_to_block_data($str) ),
        );
      }
    };
  };

  $form_state['values']['settings'] = array(
    'agent_code' => $values['agent_code'],
    'selection_mode' => $values['selection_mode'],
  );
  $form_state['values']['experiences'] = $experiences;
  conductrics_mvp_goals_associate( $form_state['values']['agent_code'], $form_state['values']['goals'] );
  unset($form_state['values']['agent_code']);
  unset($form_state['values']['selection_mode']);
}
